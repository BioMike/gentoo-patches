Upstream bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1470041

diff -urN seamonkey-2.53.15.orig/media/audioipc/audioipc/src/cmsg.rs seamonkey-2.53.15/media/audioipc/audioipc/src/cmsg.rs
--- seamonkey-2.53.15.orig/media/audioipc/audioipc/src/cmsg.rs	2022-11-02 21:12:32.000000000 +0100
+++ seamonkey-2.53.15/media/audioipc/audioipc/src/cmsg.rs	2023-05-06 10:14:09.853916463 +0200
@@ -108,6 +108,8 @@
 
             let cmsghdr = cmsghdr {
                 cmsg_len: cmsg_len as _,
+                #[cfg(target_env = "musl")]
+                __pad1: 0,
                 cmsg_level: level,
                 cmsg_type: kind,
             };
diff -urN seamonkey-2.53.15.orig/media/audioipc/client/src/stream.rs seamonkey-2.53.15/media/audioipc/client/src/stream.rs
--- seamonkey-2.53.15.orig/media/audioipc/client/src/stream.rs	2022-11-02 21:12:32.000000000 +0100
+++ seamonkey-2.53.15/media/audioipc/client/src/stream.rs	2023-05-06 10:19:02.685357728 +0200
@@ -49,8 +49,8 @@
 }
 
 struct CallbackServer {
-    input_shm: SharedMemSlice,
-    output_shm: SharedMemMutSlice,
+    input_shm: Option<SharedMemSlice>,
+    output_shm: Option<SharedMemMutSlice>,
     data_cb: ffi::cubeb_data_callback,
     state_cb: ffi::cubeb_state_callback,
     user_ptr: usize,
@@ -72,21 +72,33 @@
                 );
 
                 // Clone values that need to be moved into the cpu pool thread.
-                let input_shm = unsafe { self.input_shm.clone_view() };
-                let mut output_shm = unsafe { self.output_shm.clone_view() };
+                let input_shm = match self.input_shm {
+                    Some(ref shm) => unsafe { Some(shm.clone_view()) },
+                    None => None,
+                };
+                let mut output_shm = match self.output_shm {
+                    Some(ref shm) => unsafe { Some(shm.clone_view()) },
+                    None => None,
+                };
                 let user_ptr = self.user_ptr;
                 let cb = self.data_cb.unwrap();
 
                 self.cpu_pool.spawn_fn(move || {
                     // TODO: This is proof-of-concept. Make it better.
-                    let input_ptr: *const u8 = input_shm
-                        .get_slice(nframes as usize * frame_size)
-                        .unwrap()
-                        .as_ptr();
-                    let output_ptr: *mut u8 = output_shm
-                        .get_mut_slice(nframes as usize * frame_size)
-                        .unwrap()
-                        .as_mut_ptr();
+                    let input_ptr: *const u8 = match input_shm {
+                        Some(shm) => shm
+                            .get_slice(nframes as usize * frame_size)
+                            .unwrap()
+                            .as_ptr(),
+                        None => ptr::null()
+                    };
+                    let output_ptr: *mut u8 = match output_shm {
+                        Some(ref mut shm) => shm
+                            .get_mut_slice(nframes as usize * frame_size)
+                            .unwrap()
+                            .as_mut_ptr(),
+                        None => ptr::null_mut()
+                    };
 
                     set_in_callback(true);
                     let nframes = unsafe {
@@ -131,6 +143,9 @@
     ) -> Result<Stream> {
         assert_not_in_callback();
 
+        let has_input = init_params.input_stream_params.is_some();
+        let has_output = init_params.output_stream_params.is_some();
+
         let rpc = ctx.rpc();
         let data = try!(send_recv!(rpc, StreamInit(init_params) => StreamCreated()));
 
@@ -141,11 +156,19 @@
 
         let input = data.fds[1];
         let input_file = unsafe { File::from_raw_fd(input) };
-        let input_shm = SharedMemSlice::from(&input_file, SHM_AREA_SIZE).unwrap();
+        let input_shm = if has_input {
+            Some(SharedMemSlice::from(&input_file, SHM_AREA_SIZE).unwrap())
+        } else {
+            None
+        };
 
         let output = data.fds[2];
         let output_file = unsafe { File::from_raw_fd(output) };
-        let output_shm = SharedMemMutSlice::from(&output_file, SHM_AREA_SIZE).unwrap();
+        let output_shm = if has_output {
+            Some(SharedMemMutSlice::from(&output_file, SHM_AREA_SIZE).unwrap())
+        } else {
+            None
+        };
 
         let user_data = user_ptr as usize;
 
