Bug 1540145 - [Linux] Don't use GConf service to get proxy configuration, r=glandium

Differential Revision: https://phabricator.services.mozilla.com/D25460

--- a/toolkit/system/unixproxy/nsUnixSystemProxySettings.cpp
+++ b/toolkit/system/unixproxy/nsUnixSystemProxySettings.cpp
@@ -1,17 +1,16 @@
 /* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #include "nsISystemProxySettings.h"
 #include "mozilla/ModuleUtils.h"
 #include "nsIServiceManager.h"
-#include "nsIGConfService.h"
 #include "nsIURI.h"
 #include "nsReadableUtils.h"
 #include "nsArrayUtils.h"
 #include "prnetdb.h"
 #include "prenv.h"
 #include "nsPrintfCString.h"
 #include "nsNetCID.h"
 #include "nsNetUtil.h"
@@ -30,23 +29,19 @@
     : mSchemeProxySettings(4)
   {
   }
   nsresult Init();
 
 private:
   ~nsUnixSystemProxySettings() = default;
 
-  nsCOMPtr<nsIGConfService> mGConf;
   nsCOMPtr<nsIGSettingsService> mGSettings;
   nsCOMPtr<nsIGSettingsCollection> mProxySettings;
   nsInterfaceHashtable<nsCStringHashKey, nsIGSettingsCollection> mSchemeProxySettings;
-  bool IsProxyMode(const char* aMode);
-  nsresult SetProxyResultFromGConf(const char* aKeyBase, const char* aType, nsACString& aResult);
-  nsresult GetProxyFromGConf(const nsACString& aScheme, const nsACString& aHost, int32_t aPort, nsACString& aResult);
   nsresult GetProxyFromGSettings(const nsACString& aScheme, const nsACString& aHost, int32_t aPort, nsACString& aResult);
   nsresult SetProxyResultFromGSettings(const char* aKeyBase, const char* aType, nsACString& aResult);
 };
 
 NS_IMPL_ISUPPORTS(nsUnixSystemProxySettings, nsISystemProxySettings)
 
 NS_IMETHODIMP
 nsUnixSystemProxySettings::GetMainThreadOnly(bool *aMainThreadOnly)
@@ -59,51 +54,34 @@
 nsresult
 nsUnixSystemProxySettings::Init()
 {
   mGSettings = do_GetService(NS_GSETTINGSSERVICE_CONTRACTID);
   if (mGSettings) {
     mGSettings->GetCollectionForSchema(NS_LITERAL_CSTRING("org.gnome.system.proxy"),
                                        getter_AddRefs(mProxySettings));
   }
-  if (!mProxySettings) {
-    mGConf = do_GetService(NS_GCONFSERVICE_CONTRACTID);
-  }
 
   return NS_OK;
 }
 
-bool
-nsUnixSystemProxySettings::IsProxyMode(const char* aMode)
-{
-  nsAutoCString mode;
-  return NS_SUCCEEDED(mGConf->GetString(NS_LITERAL_CSTRING("/system/proxy/mode"), mode)) &&
-         mode.EqualsASCII(aMode);
-}
-
 nsresult
 nsUnixSystemProxySettings::GetPACURI(nsACString& aResult)
 {
   if (mProxySettings) {
     nsCString proxyMode;
     // Check if mode is auto
     nsresult rv = mProxySettings->GetString(NS_LITERAL_CSTRING("mode"), proxyMode);
     if (rv == NS_OK && proxyMode.EqualsLiteral("auto")) {
       return mProxySettings->GetString(NS_LITERAL_CSTRING("autoconfig-url"), aResult);
     }
     /* The org.gnome.system.proxy schema has been found, but auto mode is not set.
      * Don't try the GConf and return empty string. */
-    aResult.Truncate();
-    return NS_OK;
   }
 
-  if (mGConf && IsProxyMode("auto")) {
-    return mGConf->GetString(NS_LITERAL_CSTRING("/system/proxy/autoconfig_url"),
-                             aResult);
-  }
   // Return an empty string when auto mode is not set.
   aResult.Truncate();
   return NS_OK;
 }
 
 static bool
 IsInNoProxyList(const nsACString& aHost, int32_t aPort, const char* noProxyVal)
 {
@@ -217,44 +195,16 @@
   rv = proxyURI->GetPort(&proxyPort);
   NS_ENSURE_SUCCESS(rv, rv);
 
   SetProxyResult("PROXY", proxyHost, proxyPort, aResult);
   return NS_OK;
 }
 
 nsresult
-nsUnixSystemProxySettings::SetProxyResultFromGConf(const char* aKeyBase, const char* aType,
-                                                   nsACString& aResult)
-{
-  nsAutoCString hostKey;
-  hostKey.AppendASCII(aKeyBase);
-  hostKey.AppendLiteral("host");
-  nsAutoCString host;
-  nsresult rv = mGConf->GetString(hostKey, host);
-  NS_ENSURE_SUCCESS(rv, rv);
-  if (host.IsEmpty())
-    return NS_ERROR_FAILURE;
-
-  nsAutoCString portKey;
-  portKey.AppendASCII(aKeyBase);
-  portKey.AppendLiteral("port");
-  int32_t port;
-  rv = mGConf->GetInt(portKey, &port);
-  NS_ENSURE_SUCCESS(rv, rv);
-
-  /* When port is 0, proxy is not considered as enabled even if host is set. */
-  if (port == 0)
-    return NS_ERROR_FAILURE;
-
-  SetProxyResult(aType, host, port, aResult);
-  return NS_OK;
-}
-
-nsresult
 nsUnixSystemProxySettings::SetProxyResultFromGSettings(const char* aKeyBase, const char* aType,
                                                        nsACString& aResult)
 {
   nsDependentCString key(aKeyBase);
 
   nsCOMPtr<nsIGSettingsCollection> proxy_settings = mSchemeProxySettings.Get(key);
   nsresult rv;
   if (!proxy_settings) {
@@ -381,72 +331,16 @@
 
   proxy_MaskIPv6Addr(ignoreAddr, mask);
   proxy_MaskIPv6Addr(hostAddr, mask);
 
   return memcmp(&ignoreAddr, &hostAddr, sizeof(PRIPv6Addr)) == 0;
 }
 
 nsresult
-nsUnixSystemProxySettings::GetProxyFromGConf(const nsACString& aScheme,
-                                             const nsACString& aHost,
-                                             int32_t aPort,
-                                             nsACString& aResult)
-{
-  bool masterProxySwitch = false;
-  mGConf->GetBool(NS_LITERAL_CSTRING("/system/http_proxy/use_http_proxy"), &masterProxySwitch);
-  // if no proxy is set in GConf return NS_ERROR_FAILURE
-  if (!(IsProxyMode("manual") || masterProxySwitch)) {
-    return NS_ERROR_FAILURE;
-  }
-
-  nsCOMPtr<nsIArray> ignoreList;
-  if (NS_SUCCEEDED(mGConf->GetStringList(NS_LITERAL_CSTRING("/system/http_proxy/ignore_hosts"),
-                                         getter_AddRefs(ignoreList))) && ignoreList) {
-    uint32_t len = 0;
-    ignoreList->GetLength(&len);
-    for (uint32_t i = 0; i < len; ++i) {
-      nsCOMPtr<nsISupportsString> str = do_QueryElementAt(ignoreList, i);
-      if (str) {
-        nsAutoString s;
-        if (NS_SUCCEEDED(str->GetData(s)) && !s.IsEmpty()) {
-          if (HostIgnoredByProxy(NS_ConvertUTF16toUTF8(s), aHost)) {
-            aResult.AppendLiteral("DIRECT");
-            return NS_OK;
-          }
-        }
-      }
-    }
-  }
-
-  bool useHttpProxyForAll = false;
-  // This setting sometimes doesn't exist, don't bail on failure
-  mGConf->GetBool(NS_LITERAL_CSTRING("/system/http_proxy/use_same_proxy"), &useHttpProxyForAll);
-
-  nsresult rv;
-  if (!useHttpProxyForAll) {
-    rv = SetProxyResultFromGConf("/system/proxy/socks_", "SOCKS", aResult);
-    if (NS_SUCCEEDED(rv))
-      return rv;
-  }
-
-  if (aScheme.LowerCaseEqualsLiteral("http") || useHttpProxyForAll) {
-    rv = SetProxyResultFromGConf("/system/http_proxy/", "PROXY", aResult);
-  } else if (aScheme.LowerCaseEqualsLiteral("https")) {
-    rv = SetProxyResultFromGConf("/system/proxy/secure_", "PROXY", aResult);
-  } else if (aScheme.LowerCaseEqualsLiteral("ftp")) {
-    rv = SetProxyResultFromGConf("/system/proxy/ftp_", "PROXY", aResult);
-  } else {
-    rv = NS_ERROR_FAILURE;
-  }
-
-  return rv;
-}
-
-nsresult
 nsUnixSystemProxySettings::GetProxyFromGSettings(const nsACString& aScheme,
                                                  const nsACString& aHost,
                                                  int32_t aPort,
                                                  nsACString& aResult)
 {
   nsCString proxyMode;
   nsresult rv = mProxySettings->GetString(NS_LITERAL_CSTRING("mode"), proxyMode);
   NS_ENSURE_SUCCESS(rv, rv);
@@ -506,18 +400,16 @@
                                           const int32_t      aPort,
                                           nsACString & aResult)
 {
   if (mProxySettings) {
     nsresult rv = GetProxyFromGSettings(aScheme, aHost, aPort, aResult);
     if (NS_SUCCEEDED(rv))
       return rv;
   }
-  if (mGConf)
-    return GetProxyFromGConf(aScheme, aHost, aPort, aResult);
 
   return GetProxyFromEnvironment(aScheme, aHost, aPort, aResult);
 }
 
 #define NS_UNIXSYSTEMPROXYSERVICE_CID  /* 0fa3158c-d5a7-43de-9181-a285e74cf1d4 */\
      { 0x0fa3158c, 0xd5a7, 0x43de, \
        {0x91, 0x81, 0xa2, 0x85, 0xe7, 0x4c, 0xf1, 0xd4 } }
 
